syntax = "proto3";

package infraboard.mpaas.build;
option go_package = "github.com/infraboard/mpaas/apps/build";

import "common/meta/meta.proto";

message BuildConfigSet {
    // 总数
    int64 total = 1;
    // 清单
    repeated BuildConfig items = 2;
}

message BuildConfig  {
    // 元信息
    // @gotags: bson:",inline" json:"meta"
    common.meta.Meta meta = 1;
    // 创建信息
    // @gotags: bson:",inline" json:"spec"
    CreateBuildConfigRequest spec = 6;
}

message CreateBuildConfigRequest {
    // 是否启用该构建配置
    // @gotags: bson:"enabled" json:"enabled"
    bool enabled = 11;
    // 那个服务的构建
    // @gotags: bson:"service_id" json:"service_id" validate:"required"
    string service_id = 1;
	// 触发条件
	// @gotags: bson:"condition" json:"condition"
	Trigger condition = 2;
    // 构建的名称
    // @gotags: bson:"name" json:"name" validate:"required"
    string name = 3;
    // 构建描述信息
    // @gotags: bson:"describe" json:"describe"
    string describe = 4;
    // 构建目标类型
    // @gotags: bson:"target_type" json:"target_type"
    TARGET_TYPE target_type = 5;
    // 镜像构建配置
    // @gotags: bson:"image_build" json:"image_build"
    ImageBuildConfig image_build = 6;
    // 包构建配置
    // @gotags: bson:"pkg_build" json:"pkg_build"
    PkgBuildConfig pkg_build = 7;
    // 版本命名规则
    // @gotags: bson:"version_named_rule" json:"version_named_rule"
    VERSION_NAMED_RULE version_named_rule = 8;
    // 版本前缀
    // @gotags: bson:"version_prefix" json:"version_prefix"
    string version_prefix = 9;
    // 构建完成后执行部署的Id
    // @gotags: bson:"deploy_id" json:"deploy_id"
    string deploy_id = 10;

    // 构建配置标签
    // @gotags: bson:"labels" json:"labels"
    map<string,string> labels = 15;
}

enum VERSION_NAMED_RULE {
    // 比如v20230203-master-xxxx
    DATE_BRANCH_COMMIT = 0;
    // 使用GIT tag来命名版本
    GIT_TAG = 1;
}

// 触发执行的条件
message Trigger {
	// 事件名称,那些事件可以触发
	// @gotags: bson:"events" json:"events"
	repeated string events = 1;
	// 分支名称, 那些分支可以触发, 支持正则
	// @gotags: bson:"branches" json:"branches"
	repeated string branches = 2;
}

// 构建目标的类型
enum TARGET_TYPE {
    // 容器镜像
    IMAGE = 0;
    // 包
    PKG = 1;
}

// 容器镜像构建配置
message ImageBuildConfig {
    // 配置用于运行构建的流水线
    // @gotags: bson:"pipeline_id" json:"pipeline_id"
    string pipeline_id = 1;
    // dockerfile所在路径, 默认当前目录下 Dockerfile
    // @gotags: bson:"docker_file" json:"docker_file"
    string docker_file = 2;
    // 构建后推送的仓库地址
    // @gotags: bson:"image_repository" json:"image_repository" validate:"required"
    string image_repository = 4;
    // 构建时注入的环境变量
    // @gotags: bson:"build_env_vars" json:"build_env_vars"
    map<string,string> build_env_vars = 3;

    // 其他信息
    // @gotags: bson:"extra" json:"extra"
    map<string,string> extra = 15;
}

// 包构建配置
message PkgBuildConfig {
    // 配置用于运行构建的流水线
    // @gotags: bson:"pipeline_id" json:"pipeline_id"
    string pipeline_id = 1;
    // 这里推荐使用容器来执行
    // @gotags: bson:"docker_file" json:"docker_file"
    string docker_file = 2;
    // 构建产物存放的目录, 里面包含 pkg 和 部署脚本
    // @gotags: bson:"dist_path" json:"dist_path"
    string dist_path = 3;
    // 其他信息
    // @gotags: bson:"extra" json:"extra"
    map<string,string> extra = 9;

}