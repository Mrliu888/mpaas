syntax = "proto3";

package infraboard.mpaas.task;
option go_package = "github.com/infraboard/mpaas/apps/task";

import "apps/task/pb/job_task.proto";
import "apps/pipeline/pb/pipeline.proto";
import "github.com/infraboard/mcube/pb/page/page.proto";

// RPC 执行Job
service JobRPC {
    // 执行Job
    rpc RunJob(pipeline.RunJobRequest) returns(JobTask);

    // 查询任务
    rpc QueryJobTask(QueryJobTaskRequest) returns(JobTaskSet);
    // 更新任务状态
    rpc UpdateJobTaskStatus(UpdateJobTaskStatusRequest) returns(JobTask);
    // 更新任务输出结果
    rpc UpdateJobTaskOutput(UpdateJobTaskOutputRequest) returns(JobTask);
    // 任务执行详情
    rpc DescribeJobTask(DescribeJobTaskRequest) returns(JobTask);
    // 删除任务
    rpc DeleteJobTask(DeleteJobTaskRequest) returns(JobTask);
}

message QueryJobTaskRequest {
    // 分页请求
    // @gotags: json:"page"
    mcube.page.PageRequest page = 1;
    // 任务Id列表
    // @gotags: json:"ids"
    repeated string ids = 2;
	// 与该pipeline task关联的任务
	// @gotags: json:"id"
    string pipeline_task_id = 3;
}

message UpdateJobTaskStatusRequest {
	// 任务Id
	// @gotags: json:"id"
    string id = 1;
    // 任务状态需要手动更新时的Token
	// @gotags: bson:"token" json:"token"
    string update_token = 2;
    // 强制更新任务状态, 默认已经完成的任务状态不能再修改
    // 用于任务重新运行
	// @gotags: bson:"force" json:"force"
    bool force = 3;
	// 任务当前状态
	// @gotags: bson:"stage" json:"stage"
    STAGE stage = 4;
	// 状态描述
	// @gotags: bson:"message" json:"message"
	string message = 5;
	// 任务状态详细描述, 用于Debug
	// @gotags: bson:"detail" json:"detail"
	string detail = 6;
}

message UpdateJobTaskOutputRequest {
	// 任务Id
	// @gotags: json:"id"
    string id = 1;
    // 任务状态需要手动更新时的Token
	// @gotags: json:"token"
    string update_token = 2;
    // 强制更新任务状态, 默认已经完成的任务状态不能再修改
    // 用于任务重新运行
	// @gotags: bson:"force" json:"force"
    bool force = 3;
	// Job Task运行时环境变量, 大写开头的变量会更新到pipline中, 注入到后续执行的任务中
	// 小写开头的变量, 作为Task运行后的输出, task自己保留
	// @gotags: json:"runtime_envs"
	repeated RuntimeEnv runtime_envs = 4;
	// 任务运行后的产物信息, 用于界面展示
	// @gotags: json:"markdown_output"
	string markdown_output = 5;
}

message DescribeJobTaskRequest {
	// 任务Id
	// @gotags: json:"id"
    string id = 1;
}

message DeleteJobTaskRequest {
	// 任务Id
	// @gotags: json:"id"
    string id = 1;
	// 强制删除, 当job有资源无法释放时, 比如 k8s里对应的job已经被删除了
	// @gotags: json:"force"
    bool force = 2;
}