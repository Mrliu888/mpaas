syntax = "proto3";

package infraboard.mpaas.pipeline;
option go_package = "github.com/infraboard/mpaas/apps/pipeline";

import "apps/job/pb/job.proto";

message PipelineSet {
	// 总数量
	// @gotags: bson:"total" json:"total"
    int64 total = 1;
	// 清单
	// @gotags: bson:"items" json:"items"
    repeated Pipeline items = 2;
}

// 流水线
message Pipeline {
    // 唯一ID
	// @gotags: bson:"_id" json:"id"
    string id = 1;
	// 创建时间
	// @gotags: bson:"create_at" json:"create_at"
	int64 create_at = 2;
	// 更新时间
	// @gotags: bson:"update_at" json:"update_at"
	int64 update_at = 3;
    // 唯一人
	// @gotags: bson:"update_by" json:"update_by"
    string update_by = 4;
	// 流水线定义
	// @gotags: bson:"spec" json:"spec"
	CreatePipelineRequest spec = 10;
}

message CreatePipelineRequest {
	// 所属域
	// @gotags: bson:"domain" json:"domain"
	string domain = 1;
	// 所属空间
	// @gotags: bson:"namespace" json:"namespace"
	string namespace = 2;
	// 创建人
	// @gotags: bson:"create_by" json:"create_by"
	string create_by = 3;
    // 名称
	// @gotags: bson:"name" json:"name" validate:"required"
    string name = 4;
	// 描述
	// @gotags: bson:"description" json:"description"
	string description = 5;
	// 是否是模版, 用于快速继承模版参数进行修改, 模版不能用于执行
	// @gotags: bson:"is_template" json:"is_template"
	bool is_template = 6;
	// 具体编排阶段
	// @gotags: bson:"stages" json:"stages"
	repeated Stage stages = 12;
	// 标签
	// @gotags: bson:"labels" json:"labels"
	map<string, string> labels = 15;
}

// Stage todo
message Stage {
    // 名称
	// @gotags: bson:"name" json:"name" validate:"required"
    string name = 1;
	// 是否并行, 如果并行执行 该Task里面的任务会同时执行, 否则串行
	// @gotags: bson:"is_parallel" json:"is_parallel"
	bool is_parallel = 2;
	// 运行时 全局参数, 会传递给该stage的每个Task
	// @gotags: bson:"with" json:"with"
	repeated job.RunParam with = 10;
	// 需要执行的job
	// @gotags: bson:"jobs" json:"jobs"
	repeated RunJobRequest jobs = 11;
}

message RunJobRequest {
	// task执行的域
	// @gotags: bson:"domain" json:"domain"
    string domain = 1;
	// task执行的空间
	// @gotags: bson:"namespace" json:"namespace"
    string namespace = 2;
	// task属于那个Pipeline, 可以为空
	// @gotags: bson:"pipeline_task" json:"pipeline_task"
    string pipeline_task = 3;
	// task属于那个stage, 可以为空
	// @gotags: bson:"pipeline_task" json:"stage_name"
    string stage_name = 4;
	// job名称: name
	// @gotags: bson:"job" json:"job" validate:"required"
    string job = 5;
	// job运行时参数
	// @gotags: bson:"params" json:"params"
	job.VersionedRunParam params = 6;
	// 忽略失败, 当Pipeline运行时, 不会因为执行失败而 中断Pipeline执行
	// @gotags: bson:"ignore_failed" json:"ignore_failed"
	bool ignore_failed = 7;
	// WebHook配置, 及时把job执行状态推送给外部, 比如各种机器人
	// @gotags: bson:"webhooks" json:"webhooks"
	repeated WebHook webhooks = 8;
    // 唯一ID, 如果不传，则由系统自动生成
	// @gotags: bson:"-" json:"id,omitempty"
    string id = 9;
    // 任务标签
    // @gotags: bson:"labels" json:"labels"
    map<string,string> labels = 15;
}

message WebHook {
	// POST URL
	// @gotags: bson:"url" json:"url" validate:"required,url"
	string url = 1;
	// 需要自定义添加的头, 用于身份认证
	// @gotags: bson:"header" json:"header"
	map<string, string> header = 2;
	// 那些状态下触发
	// @gotags: bson:"events" json:"events"
	repeated string events = 3;
	// 简单的描述信息
	// @gotags: bson:"description" json:"description"
	string description = 4;
	// 推送结果
	// @gotags: bson:"status" json:"status"
	WebHookStatus status = 5;
}

message WebHookStatus {
	// 开始时间
	// @gotags: bson:"start_at" json:"start_at"
	int64 start_at = 1;
	// 耗时多久，单位毫秒
	// @gotags: bson:"cost" json:"cost"
	int64 cost = 2;
	// 是否推送成功
	// @gotags: bson:"success" json:"success"
	bool success = 3;
	// 异常时的错误信息
	// @gotags: bson:"message" json:"message"
	string message = 4;
}