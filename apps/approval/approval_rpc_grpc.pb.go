// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: apps/approval/pb/approval_rpc.proto

package approval

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApprovalRPCClient is the client API for ApprovalRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApprovalRPCClient interface {
	CreateApproval(ctx context.Context, in *CreateApprovalRequest, opts ...grpc.CallOption) (*Approval, error)
	QueryApproval(ctx context.Context, in *QueryApprovalRequest, opts ...grpc.CallOption) (*ApprovalSet, error)
}

type approvalRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewApprovalRPCClient(cc grpc.ClientConnInterface) ApprovalRPCClient {
	return &approvalRPCClient{cc}
}

func (c *approvalRPCClient) CreateApproval(ctx context.Context, in *CreateApprovalRequest, opts ...grpc.CallOption) (*Approval, error) {
	out := new(Approval)
	err := c.cc.Invoke(ctx, "/infraboard.mpaas.approval.ApprovalRPC/CreateApproval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalRPCClient) QueryApproval(ctx context.Context, in *QueryApprovalRequest, opts ...grpc.CallOption) (*ApprovalSet, error) {
	out := new(ApprovalSet)
	err := c.cc.Invoke(ctx, "/infraboard.mpaas.approval.ApprovalRPC/QueryApproval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApprovalRPCServer is the server API for ApprovalRPC service.
// All implementations must embed UnimplementedApprovalRPCServer
// for forward compatibility
type ApprovalRPCServer interface {
	CreateApproval(context.Context, *CreateApprovalRequest) (*Approval, error)
	QueryApproval(context.Context, *QueryApprovalRequest) (*ApprovalSet, error)
	mustEmbedUnimplementedApprovalRPCServer()
}

// UnimplementedApprovalRPCServer must be embedded to have forward compatible implementations.
type UnimplementedApprovalRPCServer struct {
}

func (UnimplementedApprovalRPCServer) CreateApproval(context.Context, *CreateApprovalRequest) (*Approval, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApproval not implemented")
}
func (UnimplementedApprovalRPCServer) QueryApproval(context.Context, *QueryApprovalRequest) (*ApprovalSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryApproval not implemented")
}
func (UnimplementedApprovalRPCServer) mustEmbedUnimplementedApprovalRPCServer() {}

// UnsafeApprovalRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApprovalRPCServer will
// result in compilation errors.
type UnsafeApprovalRPCServer interface {
	mustEmbedUnimplementedApprovalRPCServer()
}

func RegisterApprovalRPCServer(s grpc.ServiceRegistrar, srv ApprovalRPCServer) {
	s.RegisterService(&ApprovalRPC_ServiceDesc, srv)
}

func _ApprovalRPC_CreateApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalRPCServer).CreateApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infraboard.mpaas.approval.ApprovalRPC/CreateApproval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalRPCServer).CreateApproval(ctx, req.(*CreateApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalRPC_QueryApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalRPCServer).QueryApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infraboard.mpaas.approval.ApprovalRPC/QueryApproval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalRPCServer).QueryApproval(ctx, req.(*QueryApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApprovalRPC_ServiceDesc is the grpc.ServiceDesc for ApprovalRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApprovalRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infraboard.mpaas.approval.ApprovalRPC",
	HandlerType: (*ApprovalRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApproval",
			Handler:    _ApprovalRPC_CreateApproval_Handler,
		},
		{
			MethodName: "QueryApproval",
			Handler:    _ApprovalRPC_QueryApproval_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apps/approval/pb/approval_rpc.proto",
}
