// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: apps/approval/pb/deploy_rpc.proto

package approval

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeployRPCClient is the client API for DeployRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeployRPCClient interface {
	RunDeploy(ctx context.Context, in *RunDeployRequest, opts ...grpc.CallOption) (*DeployItem, error)
}

type deployRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewDeployRPCClient(cc grpc.ClientConnInterface) DeployRPCClient {
	return &deployRPCClient{cc}
}

func (c *deployRPCClient) RunDeploy(ctx context.Context, in *RunDeployRequest, opts ...grpc.CallOption) (*DeployItem, error) {
	out := new(DeployItem)
	err := c.cc.Invoke(ctx, "/infraboard.mpaas.approval.DeployRPC/RunDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeployRPCServer is the server API for DeployRPC service.
// All implementations must embed UnimplementedDeployRPCServer
// for forward compatibility
type DeployRPCServer interface {
	RunDeploy(context.Context, *RunDeployRequest) (*DeployItem, error)
	mustEmbedUnimplementedDeployRPCServer()
}

// UnimplementedDeployRPCServer must be embedded to have forward compatible implementations.
type UnimplementedDeployRPCServer struct {
}

func (UnimplementedDeployRPCServer) RunDeploy(context.Context, *RunDeployRequest) (*DeployItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunDeploy not implemented")
}
func (UnimplementedDeployRPCServer) mustEmbedUnimplementedDeployRPCServer() {}

// UnsafeDeployRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeployRPCServer will
// result in compilation errors.
type UnsafeDeployRPCServer interface {
	mustEmbedUnimplementedDeployRPCServer()
}

func RegisterDeployRPCServer(s grpc.ServiceRegistrar, srv DeployRPCServer) {
	s.RegisterService(&DeployRPC_ServiceDesc, srv)
}

func _DeployRPC_RunDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunDeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployRPCServer).RunDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infraboard.mpaas.approval.DeployRPC/RunDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployRPCServer).RunDeploy(ctx, req.(*RunDeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeployRPC_ServiceDesc is the grpc.ServiceDesc for DeployRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeployRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infraboard.mpaas.approval.DeployRPC",
	HandlerType: (*DeployRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunDeploy",
			Handler:    _DeployRPC_RunDeploy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apps/approval/pb/deploy_rpc.proto",
}
